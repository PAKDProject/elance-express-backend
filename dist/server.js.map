{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;AAAA,iCAAkC;AAClC,2BAA4B;AAC5B,2CAAkC;AAClC,8CAAkD;AAElD,IAAM,WAAW,GAAQ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAA;AAE7C;;GAEG;AACH;IAII;;;OAGG;IACH,gBAAY,IAAa;QAPzB,QAAG,GAAwB,OAAO,EAAE,CAAA;QAQhC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAC5C,IAAI,CAAC,MAAM,EAAE,CAAA;IACjB,CAAC;IAED;;OAEG;IACK,uBAAM,GAAd;QACI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QAEpB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;IAC7B,CAAC;IAED;;;OAGG;IAEM,uBAAM,GAAd;QACI,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAA;QAE7B,qBAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YAChB,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,CAAA;QACpD,CAAC,CAAC,CAAA;QAEF,OAAO,MAAM,CAAA;IACjB,CAAC;IAEF;;;OAGG;IACH,sBAAK,GAAL;QAAA,iBAOC;QANG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAU;YAClC,IAAI,GAAG,IAAI,WAAW,IAAI,YAAY;gBAClC,MAAM,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;;gBAExB,OAAO,CAAC,GAAG,CAAC,4BAA0B,KAAI,CAAC,IAAI,+BAA0B,WAAa,CAAC,CAAA;QAC/F,CAAC,CAAC,CAAA;IACN,CAAC;IACL,aAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,wBAAM","sourcesContent":["import * as express from 'express'\nimport * as cors from 'cors'\nimport { json } from 'body-parser'\nimport { default as routes } from './controllers/'\n\nconst environment: any = process.env.NODE_ENV\n\n/**\n * @class Server class which bootstraps the server\n */\nexport class Server {\n    app: express.Application = express()\n    port: Number\n\n    /**\n     * Create new Express Server\n     * @param port - port number, optional (default = 3000)\n     */\n    constructor(port?: Number) {\n        (port) ? this.port = port : this.port = 3000\n        this.config()\n    }\n\n    /**\n     * @private Configure the server\n     */\n    private config(): void {\n        this.app.use(cors())\n        this.app.use(json())\n        \n        let routes = this.routes()\n        this.app.use('/', routes)\n    }\n\n    /**\n     * routes() - sets up routes for the server\n     * @returns Express Router filled with all routes\n     */\n\n     private routes() : express.Router { \n         let router = express.Router()\n\n         routes.forEach(route => {\n             router.use(route.basePath, route.returnRouter())\n         })\n\n         return router\n     }\n\n    /**\n     * Start the server.\n     * @throws Error if app doesn't start and NODE_ENV != production\n     */\n    start(): void {\n        this.app.listen(this.port, (err: Error) => {\n            if (err && environment != \"production\")\n                throw Error(err.message)\n            else\n                console.log(`Server running on port ${this.port}. Current Environment: ${environment}`)\n        })\n    }\n}"]}