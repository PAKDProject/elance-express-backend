{"version":3,"file":"usercontroller.spec.js","sourceRoot":"","sources":["../../../src/tests/controllers/usercontroller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, before, it, beforeEach } from \"mocha\"\nimport * as chai from 'chai'\nimport { Server } from '../../lib/createServer'\nimport chaiHttp = require('chai-http')\nimport { UserModel, User } from \"../../models/user\";\n\nchai.use(chaiHttp)\n\ndescribe('Testing the User Controller', () => {\n    let emails: string[] = [];\n    const apiUrl = 'http://localhost:3000/user'\n    before(done => {\n        let app = new Server( undefined, 'development')\n        app.config().then(() => { \n            app.start()\n            new UserModel({\n                email: 'jeffmoneybezos1@aws.com',\n                fName: 'Jeff',\n                lName: 'Bezos',\n                dob: new Date('01/01/01'),\n                summary: 'Ayy its ya boi, skinnybezos',\n                skills: [\n                    {\n                        title: 'God King of Earth',\n                        description: 'I have too much money'\n                    },\n                    {\n                        title: 'Absolutely Shredded',\n                        description: 'gains gains gains'\n                    }\n                ],\n                educationItems: [\n                    {\n                        degreeTitle: 'PhD in Being Rich',\n                        startYear: '2017',\n                        endYear: '2999',\n                        collegeName: 'AWS Institute',\n                        grade: '69',\n                        description: 'Why is this a field loool 4Head'\n                    }\n                ],\n                avatarUrl: 'bezos.png',\n                backoundUrl: 'background.png',\n                socialLinks: [\n                    {\n                        name: 'Github',\n                        linkUrl: 'https://github.com/BlueishLeaf'\n                    }\n                ],\n                tagline: 'The real OG'\n            }).save((err,pr)=> {\n                emails.push(pr.email as string);\n            })\n            new UserModel({\n                email: 'jeffmoneybezos2@aws.com',\n                fName: 'Jeff',\n                lName: 'Bezos',\n                dob: new Date('01/01/01'),\n                summary: 'Ayy its ya boi, skinnybezos',\n                skills: [\n                    {\n                        title: 'God King of Earth',\n                        description: 'I have too much money'\n                    },\n                    {\n                        title: 'Absolutely Shredded',\n                        description: 'gains gains gains'\n                    }\n                ],\n                educationItems: [\n                    {\n                        degreeTitle: 'PhD in Being Rich',\n                        startYear: '2017',\n                        endYear: '2999',\n                        collegeName: 'AWS Institute',\n                        grade: '69',\n                        description: 'Why is this a field loool 4Head'\n                    }\n                ],\n                avatarUrl: 'bezos.png',\n                backoundUrl: 'background.png',\n                socialLinks: [\n                    {\n                        name: 'Github',\n                        linkUrl: 'https://github.com/BlueishLeaf'\n                    }\n                ],\n                tagline: 'The real OG'\n            }).save((err, pr) => {\n                emails.push(pr.email as string);\n            })\n            done()\n        })\n    })\n\n    it('Should return all users', done => {\n        chai.request(apiUrl)\n        .get('')\n        .then(res => {\n            chai.expect(res.status).to.equal(200)\n            chai.expect(res.body).to.have.property('msg').eql(\"Users found.\")\n            chai.expect(res.body).to.have.property('users').not.null\n            done()\n        })\n    })\n\n    it('Should return the user at /:id', done => {\n        UserModel.findOne({}, (_err, user) => {\n            if(user){\n                chai.request(apiUrl)\n                .get('/' + user._id)\n                .then(res => {\n                    chai.expect(res.status).to.equal(200)\n                    chai.expect(res.body).to.have.property('msg').eql('User found.')\n                    chai.expect(res.body).to.have.property('user').not.null\n                    done()\n                })\n            }\n        })\n    })\n\n    it('Should return all relevant users at /search/:query is used', done => {\n        const query = encodeURIComponent(JSON.stringify({fName: \"Jeff\", email: \"jeffmoneybezos2@aws.com\"}))\n        chai.request(apiUrl)\n        .get('/search/' + query)\n        .then(res => {\n            chai.expect(res.status).to.equal(200)\n            chai.expect(res.body).to.have.property('msg').eql('Users found.')\n            chai.expect(res.body).to.have.property('users').not.null\n            done()\n        })\n    })\n\n    it('Should insert a new user at /', done => {\n        const user = {\n            email: 'jeffmoneybezos3@aws.com',\n            fName: 'Jeff',\n            lName: 'Bezos',\n            dob: new Date('01/01/01'),\n            summary: 'Ayy its ya boi, skinnybezos',\n            skills: [\n                {\n                    title: 'God King of Earth',\n                    description: 'I have too much money'\n                },\n                {\n                    title: 'Absolutely Shredded',\n                    description: 'gains gains gains'\n                }\n            ],\n            educationItems: [\n                {\n                    degreeTitle: 'PhD in Being Rich',\n                    startYear: '2017',\n                    endYear: '2999',\n                    collegeName: 'AWS Institute',\n                    grade: '69',\n                    description: 'Why is this a field loool 4Head'\n                }\n            ],\n            avatarUrl: 'bezos.png',\n            backoundUrl: 'background.png',\n            socialLinks: [\n                {\n                    name: 'Github',\n                    linkUrl: 'https://github.com/BlueishLeaf'\n                }\n            ],\n            tagline: 'The real OG'\n        }\n        chai.request(apiUrl)\n        .post('/')\n        .send(user)\n        .then(res => {\n            chai.expect(res.status).to.equal(201)\n            chai.expect(res.body).to.have.property('msg').eql('User created.')\n            chai.expect(res.body).to.have.property('user').not.null\n            done()\n        })\n    })\n\n    it('Should update user at /:id when ID is passed', done => {\n        const userChanges = {\n            fName: 'Money',\n            lName: 'Bags'\n        }\n        UserModel.findOne({}, (_err, user) => {\n            if(user){\n                chai.request(apiUrl)\n                .put('/' + user._id)\n                .send(userChanges)\n                .then(res => {\n                    chai.expect(res.status).to.equal(202)\n                    chai.expect(res.body).to.have.property('msg').eql('User updated.')\n                    chai.expect(res.body.user).to.have.property('fName').eql('Money')\n                    chai.expect(res.body.user).to.have.property('lName').eql('Bags')\n                    done()\n                })\n            }\n        })\n    })\n\n    it('Should delete the user at /:id when ID is passed', done => {\n        UserModel.findOne({}, (_err, user) => {\n            if (user){\n                chai.request(apiUrl)\n                .del('/' + user._id)\n                .then(res => {\n                    chai.expect(res.status).to.equal(200)\n                    chai.expect(res.body).to.have.property('msg').eql('User deleted.')\n                    chai.expect(res.body).to.have.property('user').not.null\n                    done()\n                })\n            }\n        })\n    })\n\n    after(done => {\n        emails.push(\"jeffmoneybezos3@aws.com\");\n        UserModel.deleteMany({email: emails}, (_err) => {\n            done()\n            process.exit(0)\n        })\n    })\n})"]}