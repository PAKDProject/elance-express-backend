{"version":3,"file":"logincontroller.spec.js","sourceRoot":"","sources":["../../../src/tests/controllers/logincontroller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, before, it, beforeEach } from \"mocha\"\nimport * as chai from 'chai'\nimport { Server } from '../../lib/createServer'\nimport chaiHttp = require('chai-http')\nimport { get as getConfig } from 'config'\nimport { Login, LoginModel } from \"../../models/login\";\nimport { ObjectId } from 'mongodb'\nimport { User, UserModel } from \"../../models/user\";\nimport { hash, compare } from 'bcrypt'\nimport { verify } from 'jsonwebtoken'\nimport { IJWT } from \"../../interfaces/jwt\";\n\nchai.use(chaiHttp)\n\ndescribe('Testing the Login Controller', () => {\n    let user = new User(\n        \"test@test.com\",\n        \"John\",\n        \"Test\"\n    )\n\n    let userLogin = new Login(\n        \"test@test.com\",\n        undefined,\n        undefined\n    )\n    let userId: ObjectId\n    before(async done => {\n        //Starting dev server for testing\n        let server = await new Server(undefined, 'development')\n        await server.config()\n        await server.start()\n\n        //Save a test user\n        await new UserModel(user).save((err, addedUser) => {\n            if(err) throw err\n            userLogin.userId = addedUser._id\n            userId = addedUser._id\n        })\n\n        //Hash a password for the user, save their login details\n        let hashedPass = await hash('hashmeplz', 10)\n        userLogin.password = hashedPass\n        await new LoginModel(userLogin).save()\n        done()\n    })\n\n    it('Should return a JWT and redirect to app when correct params are sent to POST /login', done => {\n        let { email } = userLogin;\n        chai\n        .request(getConfig('backendUrl'))\n        .post('/login')\n        .send({\n            email,\n            password: 'hashmeplz'\n        })\n        .then(res => {\n            chai.expect(res.status).to.equal(301)\n            chai.expect(res.body.jwt).to.not.be.undefined\n            chai.expect(res.body.err).to.be.undefined\n            \n            let jwt = verify(res.body.jwt, getConfig('tokenpass'))\n            let decodedJWT: IJWT = jwt as IJWT;\n            chai.expect(decodedJWT).to.equal(userId)\n            done()\n        })\n\n    })\n\n    it('Should return 403 if wrong email is passed to POST /login', done => {\n        chai.request(getConfig('backendUrl'))\n        .post('/login')\n        .send({\n            email: 'whatMan@what.slt',\n            password: 'hashmeplz'\n        })\n        .then(res => {\n            chai.expect(res.status).to.equal(403)\n            chai.expect(res.body.err).to.equal('Wrong email or password entered!')\n            done()\n        })\n    })\n\n    it('Should return 403 if wrong password is passed to POST /login', done => {\n        let { email } = userLogin\n\n        chai.request(getConfig('backendUrl'))\n        .post('/login')\n        .send({\n            email,\n            password: 'donthashmepls'\n        })\n        .then(res => {\n            chai.expect(res.status).to.equal(403)\n            chai.expect(res.body.err).to.equal('Wrong email or password entered!')\n            done()\n        })\n    })\n\n    it('Should return 400 if no password is passed to POST /login', done => {\n        let { email } = userLogin\n\n        chai.request(getConfig('backendUrl'))\n        .post('/login')\n        .send({\n            email\n        })\n        .then(res => {\n            chai.expect(res.status).to.equal(400)\n            chai.expect(res.body.err).to.equal('No email or password entered!')\n            done()\n        })\n    })\n    \n    it('Should return 400 if no email is passed to POST /login', done => {\n        chai.request(getConfig('backendUrl'))\n        .post('/login')\n        .send({\n            password: 'hashmeplz'\n        })\n        .then(res => {\n            chai.expect(res.status).to.equal(400)\n            chai.expect(res.body.err).to.equal('No email or password entered!')\n            done()\n        })\n    })\n\n    after(async done => {\n        // Delete all test data from db\n        await UserModel.deleteMany({$and: [{fName: user.fName},{lName: user.lName}, {email: user.email}]})\n        await LoginModel.deleteMany({$and: [{email: userLogin.email}]})\n        done()\n    })\n})"]}