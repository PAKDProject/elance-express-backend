{"version":3,"file":"userCon.js","sourceRoot":"","sources":["../../src/controllers/userCon.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAiE;AAEjE,yCAAgD;AAChD,2DAAuD;AAEvD;;EAEE;AACF,MAAa,cAAc;IAMvB;;MAEE;IACF;QARA;;UAEE;QACF,aAAQ,GAAW,OAAO,CAAA;IAO1B,CAAC;IAED;;;MAGE;IACF,YAAY;QACR,OAAO,gBAAM,EAAE;aACV,GAAG,CAAC,GAAG,EAAE,yBAAW,CAAC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC5E,IAAI,KAAK,GAAG,MAAM,gBAAS,CAAC,YAAY,EAAE,CAAA;YAC1C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;;gBACzD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxB,CAAC,CAAA,CAAC,CAAC;aACF,IAAI,CAAC,GAAG,EAAE,yBAAW,CAAC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC7E,IAAI,OAAO,GAAG,IAAI,gBAAS,CAAC,IAAI,WAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;YACxD,OAAO,CAAC,IAAI,EAAE,CAAA;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,oBAAoB,CAAC,CAAA;QACtE,CAAC,CAAA,CAAC,CAAC,CAAA;IACX,CAAC;CACJ;AA9BD,wCA8BC","sourcesContent":["import { Router, Response, Request, NextFunction } from 'express'\nimport { BaseRouter } from '../interfaces/baseRouter'\nimport { UserModel, User } from '../models/user'\nimport { asyncRoutes } from '../middleware/asyncRoutes'\n\n/**\n* @class UserController used to control user route\n*/\nexport class UserController implements BaseRouter {\n    /**\n    * @property basePath used as a base for routing related to the index\n    */\n    basePath: string = '/user'\n\n    /**\n    * @constructor\n    */\n    constructor() {\n\n    }\n\n    /**\n    * Returns a configured router for the route\n    * @returns Router\n    */\n    returnRouter(): Router {\n        return Router()\n            .get('/', asyncRoutes(async (req: Request, res: Response, next: NextFunction) => {\n                let users = await UserModel.findAllUsers()\n                if (users.length === 0) res.status(404).send('No users found')\n                else res.send(users)\n            }))\n            .post('/', asyncRoutes(async (req: Request, res: Response, next: NextFunction) => {\n                let newUser = new UserModel(new User(req.body.username))\n                newUser.save()\n                res.status(201).send(`User ${newUser.username} has been created.`)\n            }))\n    }\n}"]}