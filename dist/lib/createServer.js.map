{"version":3,"file":"createServer.js","sourceRoot":"","sources":["../../src/lib/createServer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express'\nimport * as cors from 'cors'\nimport { json } from 'body-parser'\nimport { default as routes } from '../controllers'\nimport { MongoDb } from './createDb'\nimport { info, success } from '../helpers/logger';\nimport { errorLogger } from '../middleware/errorLogger';\nimport { errorHandler } from '../middleware/errorHandler';\n\n/**\n * @class Server class which bootstraps the server\n */\nexport class Server {\n    app: express.Application = express()\n    port: Number\n    configured: boolean = false\n    environment: any\n\n    /**\n     * Create new Express Server\n     * @param port - port number, optional (default = 3000)\n     */\n    constructor(port?: Number, environment?: any) {\n        (port) ? this.port = port : this.port = 3000;\n        (environment) ? this.environment = environment : this.environment = process.env.NODE_ENV;\n    }\n\n    /**\n     * Configure the server\n     * @throws error - if mongodb doesn't setup properly\n     */\n    public async config(): Promise<any> {\n        try {\n            info('Beginning Server Configuration...')\n            this.app.use(cors())\n            this.app.use(json())\n\n            info('1. Setting up mongo...')\n            await new MongoDb().setup()\n            success('Mongodb connection established!')\n\n            info('2. Setting up routes...')\n            let routes = this.routes()\n            this.app.use('/', routes)\n            success('Routes setup complete!')\n\n            info('3. Setting up error logging...')\n            this.app.use(errorLogger)\n            success('Error Logger setup complete!')\n\n            info('4. Setting up error handler...')\n            this.app.use(errorHandler)\n            success('Error handler setup complete!')\n\n            success('Server fully configured!')\n            this.configured = true;\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    /**\n     * Sets up routes for the server\n     * @returns Express Router filled with all routes\n     */\n    private routes(): express.Router {\n        let router = express.Router()\n\n        routes.forEach(route => {\n            router.use(route.basePath, route.returnRouter())\n        })\n\n        return router\n    }\n\n    /**\n     * Start the server.\n     * @throws Error if app doesn't start and NODE_ENV != production\n     */\n    start(): void {\n        info('Server starting...')\n        if (this.configured) {\n            this.app.listen(this.port, (err: Error) => {\n                if (err && this.environment != \"production\")\n                    throw new Error(err.message)\n                else\n                    success(`Server running on port ${this.port}. Current Environment: ${this.environment}`)\n            })\n        }\n        else {\n            throw new Error(\"Server not configured! Run new Server().config() first!\")\n        }\n    }\n}"]}