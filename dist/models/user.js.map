{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Typegoose, prop, ModelType, staticMethod, arrayProp, Ref } from 'typegoose'\nimport { ObjectId } from 'mongodb';\nimport { Job } from './job';\n\n/**\n * Class for Skills\n */\nexport class Skill {\n    @prop()\n    title?: string\n\n    @prop()\n    description?: string\n}\n\n/**\n * Class for Education Items\n */\nexport class EducationItem {\n    @prop()\n    degreeTitle?: string\n\n    @prop()\n    startYear?: string\n\n    @prop()\n    endYear?: string\n\n    @prop()\n    collegeName?: string\n\n    @prop()\n    grade?: string\n\n    @prop()\n    description?: string\n}\n\n/**\n * Class for Social Links\n */\nexport class SocialLink {\n    @prop()\n    name?: string\n\n    @prop()\n    linkUrl?: string\n}\n\n/**\n* Model class for User\n* @extends Typegoose\n*/\nexport class User extends Typegoose {\n\n    @prop()\n    email?: string\n\n    @prop()\n    fName?: string\n\n    @prop()\n    lName?: string\n\n    @prop()\n    dob?: Date\n\n    @prop()\n    summary?: string\n\n    @arrayProp({items: Skill})\n    skills?: Skill[]\n\n    @arrayProp({items: EducationItem})\n    educationItems?: EducationItem[]\n\n    @arrayProp({itemsRef: Job})\n    activeJobs?: Ref<Job>[]\n\n    @arrayProp({itemsRef: Job})\n    jobHistory?: Ref<Job>[]\n\n    @prop()\n    avatarUrl?: string\n\n    @prop()\n    backgroundUrl?: string\n\n    @arrayProp({items: SocialLink})\n    socialLinks?: SocialLink[]\n\n    @prop()\n    tagline?: string\n\n    @arrayProp({itemsRef: User})\n    contacts?: Ref<User>[]\n\n    constructor(email?: string, fName?: string, lName?: string, dob?: Date, summary?: string, skills?: Skill[], educationItems?: EducationItem[], activeJobs?: Job[], jobHistory?: Job[], avatarUrl?: string, backgroundUrl?: string, socialLinks?: SocialLink[], tagline?: string, contacts?: User[]) {\n        super()\n        this.email = email\n        this.fName = fName\n        this.lName = lName\n        this.dob = dob\n        this.summary = summary\n        this.skills = skills\n        this.educationItems = educationItems\n        this.activeJobs = activeJobs\n        this.jobHistory = jobHistory\n        this.avatarUrl = avatarUrl\n        this.backgroundUrl = backgroundUrl\n        this.socialLinks = socialLinks\n        this.tagline = tagline\n        this.contacts = contacts\n    }\n    /**\n    * Default method for finding all Users\n    * @param this - context\n    */\n    @staticMethod\n    static async findAllUsers(this: ModelType<User>) {\n        return await this.find({})\n    }\n\n    // Find a user based on the name given\n    @staticMethod\n    static async findUserByName(this: ModelType<User>, name: string) {\n        return await this.findOne({ name: name })\n    }\n\n    // Find a user based on the ID given\n    @staticMethod\n    static async findUserById(this: ModelType<User>, id: string) {\n        let o_id = new ObjectId(id)\n        return await this.findOne({ _id: o_id })\n    }\n\n    // Delete a user based on the ID given\n    @staticMethod\n    static async deleteUserById(this: ModelType<User>, id: string) {\n        let o_id = new ObjectId(id)\n        return await this.deleteOne({ _id: o_id })\n    }\n\n    // Empty this collection(for testing purposes)\n    @staticMethod\n    static async deleteAllUsers(this: ModelType<User>) {\n        return await this.deleteMany({});\n    }\n}\n\nexport const UserModel = new User().getModelForClass(User)"]}