{"version":3,"file":"job.js","sourceRoot":"","sources":["../../src/models/job.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yCAAoE;AACpE,qCAAkC;AAElC;;;EAGE;AACF,MAAa,GAAI,SAAQ,qBAAS;IAsB9B,YAAY,KAAc,EAAE,OAAgB,EAAE,WAAoB,EAAE,SAAgB,EAAE,OAAc,EAAE,UAAqB,EAAE,QAAiB;QAC1I,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC5B,CAAC;IACD;;;MAGE;IAEF,MAAM,CAAO,WAAW;;YACpB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAC9B,CAAC;KAAA;IAED;;;;MAIE;IAEF,MAAM,CAAO,cAAc,CAAuB,KAAa;;YAC3D,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAA;QAC1C,CAAC;KAAA;CAEJ;AAjDG;IADC,gBAAI,EAAE;;kCACO;AAGd;IADC,gBAAI,EAAE;;oCACS;AAGhB;IADC,gBAAI,EAAE;;wCACa;AAGpB;IADC,gBAAI,EAAE;8BACK,IAAI;sCAAA;AAGhB;IADC,gBAAI,EAAE;8BACG,IAAI;oCAAA;AAGd;IADC,gBAAI,EAAE;8BACM,kBAAQ;uCAAA;AAGrB;IADC,gBAAI,EAAE;;qCACU;AAiBjB;IADC,wBAAY;;;;4BAGZ;AAQD;IADC,wBAAY;;;;+BAGZ;AAjDL,kBAmDC;AAEY,QAAA,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAA","sourcesContent":["import { Typegoose, prop, ModelType, staticMethod } from 'typegoose'\nimport { ObjectId } from 'mongodb'\n\n/**\n* Model class for Job\n* @extends Typegoose\n*/\nexport class Job extends Typegoose {\n    @prop()\n    title?: string\n\n    @prop()\n    payment?: number\n\n    @prop()\n    description?: string\n\n    @prop()\n    startDate?: Date\n\n    @prop()\n    dueDate?: Date\n\n    @prop()\n    employerID?: ObjectId\n\n    @prop()\n    progress?: number\n\n    constructor(title?: string, payment?: number, description?: string, startDate?: Date, dueDate?: Date, employeeID?: ObjectId, progress?: number) {\n        super()\n        this.title = title\n        this.payment = payment\n        this.description = description\n        this.startDate = startDate\n        this.dueDate = dueDate\n        this.employerID = employeeID\n        this.progress = progress\n    }\n    /**\n    * Default method for finding all Jobs\n    * @param this - context\n    */\n    @staticMethod\n    static async findAllJobs(this: ModelType<Job>) {\n        return await this.find({})\n    }\n\n    /**\n    * Find Job by username\n    * @param this - context\n    * @param title - title for the job\n    */\n    @staticMethod\n    static async findJobByTitle(this: ModelType<Job>, title: string) {\n        return await this.find({title: title})\n    }\n\n}\n\nexport const JobModel = new Job().getModelForClass(Job)"]}