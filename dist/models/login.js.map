{"version":3,"file":"login.js","sourceRoot":"","sources":["../../src/models/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yCAAoE;AACpE,qCAAkC;AAElC;;;EAGE;AACF,MAAa,KAAM,SAAQ,qBAAS;IAahC,YAAY,KAAc,EAAE,QAAiB,EAAE,MAAiB;QAC5D,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED;;;;MAIE;IAEF,MAAM,CAAO,gBAAgB,CAAyB,KAAa;;YAC/D,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAA;QAC1C,CAAC;KAAA;IAED;;;;;;OAMG;IAEH,MAAM,CAAO,WAAW,CAAyB,KAAa,EAAE,iBAAyB,EAAE,MAAgB;;YACvG,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;QAC9E,CAAC;KAAA;CAEJ;AAxCG;IADC,gBAAI,EAAE;;oCACO;AAGd;IADC,gBAAI,EAAE;;uCACU;AAGjB;IADC,gBAAI,EAAE;;2CACc;AAGrB;IADC,gBAAI,EAAE;8BACE,kBAAQ;qCAAA;AAejB;IADC,wBAAY;;;;mCAGZ;AAUD;IADC,wBAAY;;qDACsF,kBAAQ;;8BAE1G;AAxCL,sBA0CC;AAEU,QAAA,UAAU,GAAG,IAAI,KAAK,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA","sourcesContent":["import { Typegoose, prop, ModelType, staticMethod } from 'typegoose'\nimport { ObjectId } from 'mongodb'\n\n/**\n* Model class for Login\n* @extends Typegoose\n*/\nexport class Login extends Typegoose {\n    @prop()\n    email?: string\n\n    @prop()\n    password?: string\n\n    @prop()\n    failedLogins?: number\n\n    @prop()\n    userId?: ObjectId\n\n    constructor(email?: string, password?: string, userId?: ObjectId) {\n        super()\n        this.email = email;\n        this.password = password;\n        this.userId = userId;\n    }\n\n    /**\n    * Find login by email\n    * @param this - context\n    * @param email - email for the person\n    */\n    @staticMethod\n    static async findLoginByEmail(this: ModelType<Login>, email: string) {\n        return await this.find({email: email})\n    }\n\n    /**\n     * Adding new login details\n     * @param this - context\n     * @param email - email\n     * @param encryptedPassword - password which is encrypted by hash\n     * @param userId - userId to correlate user with login details\n     */\n    @staticMethod\n    static async addNewLogin(this: ModelType<Login>, email: string, encryptedPassword: string, userId: ObjectId) {\n        return await this.insertMany(new Login(email, encryptedPassword, userId));\n    }\n\n}\n\nexport let LoginModel = new Login().getModelForClass(Login)"]}